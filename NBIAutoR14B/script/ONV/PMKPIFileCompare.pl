#! /usr/bin/perl
# This script used for PM north reporting file comparation which generated by NFI(CMCC EPS Spec V1.1.0).
# The output ResultFile can be import into excel for more readable pupose

use strict;

my $g_usage = "$0 BaseNFIFile=<base file> NewNFIFile=<new file> ResultFile=<result file> ResultSummaryFile=<summary file>";
my $g_autoflush_flag;
my %g_err_code;
my $verbose;
my $Output_format;

my $totalMeas=0;
my $failedMeas=0;
my $passMeas=0;
my $missingMeas=0;

my $paras_config = {};

my $result_summary_file;

&fetch_config($paras_config, @ARGV);
&print_config($paras_config);
&check_config($paras_config, $g_usage);

my $base_nfi_xml_file = $$paras_config{"BaseNFIFile"};
if( ! -f $base_nfi_xml_file )
{
    &com_err("error: $base_nfi_xml_file not exist\n");
    &com_die(2, "usage: $g_usage\n");
}

my $new_nfi_xml_file = $$paras_config{"NewNFIFile"};
if( ! -f $new_nfi_xml_file )
{
    &com_err("error: $new_nfi_xml_file not exist\n");
    &com_die(2, "usage: $g_usage\n");
}

my $result_detail_file = $$paras_config{"ResultFile"};
my $result_summary_file=$$paras_config{"ResultSummaryFile"};

my $BaseData_Value=parse_nfi_xml_file($base_nfi_xml_file);

my $NewData_Value=parse_nfi_xml_file($new_nfi_xml_file);


print "NFI file compare start......\n";

open(Report_D,">$result_detail_file") || die "$!";
print Report_D "<CompareResult>\n";

open(Report_S,">$result_summary_file") || die "$!";

print Report_S "BEGIN------------------------------------------------------------------------\n"; 
print Report_S "\n####Compare Failed Details#############\n";
print Report_S "#DN	     				MOC			           Measurment           BaseValue              NewValue           TestResult\n";

foreach my $moc_loop (sort keys %{$BaseData_Value})
{
	
	print Report_D "<MOC mocname='".$moc_loop."'>\n";
  my $BaseData_Value2 = $$BaseData_Value{$moc_loop};
  foreach my $dn_loop ( sort keys %$BaseData_Value2)
  {
   print Report_D "<MOI dn='".$dn_loop."'>\n";
   my $BaseData_Value3 = $$BaseData_Value{$moc_loop}{$dn_loop};
   foreach my $meas_loop (sort keys %$BaseData_Value3)
   {
      $totalMeas=$totalMeas+1;
      print Report_D "<Meas>\n     <MeaName>$meas_loop</MeaName>\n";
      print Report_D "     <BaseMeaValue>$$BaseData_Value{$moc_loop}{$dn_loop}{$meas_loop}</BaseMeaValue>\n";
      
      if(( defined($$BaseData_Value{$moc_loop}{$dn_loop}{$meas_loop})) && ( ! defined($$NewData_Value{$moc_loop}{$dn_loop}{$meas_loop}))){
       	  print Report_D "     <NewMeaValue></NewMeaValue>\n";
       	  print Report_D "     <CompareResult>Missing</CompareResult>\n";
       	  #print Report_S "$moc_loop\t$dn_loop\t$meas_loop\t$$BaseData_Value{$moc_loop}{$dn_loop}{$meas_loop}\t\tMissing\n";
       	  $Output_format=sprintf "%.75s %.15s %.60s %20s EMPTY    Missing\n",$dn_loop,$moc_loop,$meas_loop,$$BaseData_Value{$moc_loop}{$dn_loop}{$meas_loop};
       	  print Report_S $Output_format;
       	  $missingMeas=$missingMeas+1;
    	}
     
      if(( defined($$BaseData_Value{$moc_loop}{$dn_loop}{$meas_loop})) && ( defined($$NewData_Value{$moc_loop}{$dn_loop}{$meas_loop}))){
      	
        	print Report_D "     <NewMeaValue>$$NewData_Value{$moc_loop}{$dn_loop}{$meas_loop}</NewMeaValue>\n";
       	  
       	  if ( $$BaseData_Value{$moc_loop}{$dn_loop}{$meas_loop} eq $$NewData_Value{$moc_loop}{$dn_loop}{$meas_loop} ){
       	  	print Report_D "     <CompareResult>Pass</CompareResult>\n";
       	  	#$Output_format=sprintf "%.75s %.15s %.60s %20s %20s    Pass \n",$dn_loop,$moc_loop,$meas_loop,$$BaseData_Value{$moc_loop}{$dn_loop}{$meas_loop},$$NewData_Value{$moc_loop}{$dn_loop}{$meas_loop};
       	  	$passMeas=$passMeas+1;
       	  }	
       	  else
       	  {
       	  	print Report_D "     <CompareResult>Failed</CompareResult>\n";
       	  	#print Report_S "$moc_loop\t$dn_loop\t$meas_loop\t$$BaseData_Value{$moc_loop}{$dn_loop}{$meas_loop}\t$$NewData_Value{$moc_loop}{$dn_loop}{$meas_loop}\tFailed\n";
       	  	$Output_format=sprintf "%.75s %.15s %.60s %20s %20s    Failed \n",$dn_loop,$moc_loop,$meas_loop,$$BaseData_Value{$moc_loop}{$dn_loop}{$meas_loop},$$NewData_Value{$moc_loop}{$dn_loop}{$meas_loop};
       	    print Report_S $Output_format;
       	    $failedMeas=$failedMeas+1;
       	  }	
       	  
    	}
      print Report_D "</Meas>\n"
    }
    print Report_D "</MOI>\n"
  }
  print Report_D "</MOC>\n"
}  

print Report_D "</CompareResult>\n" ;
print Report_S "\n####Summary#############\n";
print Report_S "BaseNFIFile=$base_nfi_xml_file\n";
print Report_S "NewNFIFile=$new_nfi_xml_file\n";
my $summary_report=sprintf "Total: %3d  Passed: %3d  Failed: %3d  Missing: %3d",$totalMeas,$passMeas,$failedMeas,$missingMeas;
print Report_S $summary_report;
print Report_S "\nEND------------------------------------------------------------------------\n"; 

close(Report_S);
close(Report_D);		

print "NFI file compare finished, please check the ResultFile=$result_detail_file ResultSummaryFile=$result_summary_file for details\n";


	
sub parse_nfi_xml_file
{
     my %PMData_Index;
     my %PMData_Value;
     my $MOC;
     my $DN;
     my $Sub_Index;
     my $Sub_Measurement;
     my %tmp;
   
     my $XMLDataFile = $_[0];

    
  print "Parse PM NFI file $XMLDataFile starting.....\n";
	open(XMLData,"$XMLDataFile") || die "$!";
	
  while(<XMLData>){
    
     if( $_ =~ /<ObjectType>(.*)<\/ObjectType>/){
    
       $MOC=$1;

     }  
     
     #<N i="1">RRC.ConnMean</N>
     if( $_ =~ /<N i=\"([0-9]*)\">(.*)<\/N>/ ){
       $PMData_Index{$MOC}{$2}=$1;
     }
     # <Pm Dn="SubNetwork=Eric,SubNetwork=oss1,SubNetwork=ERBS,ManagedElement=kj2,EnbFunction=1,EutranCellTdd=1" UserLabel="KJ2_Cell1">
     
     if( $_ =~ /<Pm\sDn=\"(.*)\"\sUserLabel=\"(.*)\">/ ){
       $DN=$1;   
       $PMData_Value{$MOC}{$1}{"UserLabel"}=$2;
     }
     #<V i="1">0</V>
     if( $_ =~ /\s+<V i=\"([0-9]*)\">(.*)<\/V>/ ){
     
       	  my $hash2 = $PMData_Index{$MOC};
       	  foreach my $meas (keys %$hash2)
       	  {

       	     
             if( $PMData_Index{$MOC}{$meas} eq $1 ){
                 $PMData_Value{$MOC}{$DN}{$meas}=$2;
             }
          }
     }
     
     #<CV i="6">
     #<SN>RRC.AttConnEstab.Em</SN>
     #<SV>7</SV>
     
     if( $_ =~ /\s+<CV i=\"([0-9]*)\">/ ){

          $Sub_Index=$1;
     }     
     
     if( $_ =~ /\s+<SN>(.*)<\/SN>/ ){

       	  $Sub_Measurement=$1;
     }  
     
     if( $_ =~ /\s+<SV>(.*)<\/SV>/ ){

       	  my $hash2 = $PMData_Index{$MOC};
       	  foreach my $meas (keys %$hash2)
       	  {
	     
             if( $PMData_Index{$MOC}{$meas} eq $Sub_Index ){
             	   my $measurement_join=$meas."##"."$Sub_Measurement";

                 $PMData_Value{$MOC}{$DN}{$measurement_join}=$1;
             }
          }
     }
  
  }    
  close(XMLData);
  print "Parse PM NFI file $XMLDataFile finished.....\n";
  return \%PMData_Value;
}



################################################################################################################
# check_config(%config, $usage)
################################################################################################################
sub check_config
{
    my $config;
    my $usage;

    my $str;
    my @keys;
    my $key;

    my $invalid_flag;

    ($config, $usage) = @_;

    $str = $usage;
    $str =~ s/=<.*?>//g;

    @keys = split(/\s+/, $str);
    shift(@keys);

    $invalid_flag = 0;
    foreach $key (@keys) 
    {
        next if(  $key =~ /^\[.*\]$/ );

        if( ! defined( $$config{ $key } ) )
        {
            &com_err("error: absent parameter of $key\n");    
            $invalid_flag = 1;
        }
    }

    &com_die("err_args", "absent parameter(s)\nusage = $usage\n") if ( 0 ne $invalid_flag  );
}

################################################################################################################
# print_config(%config)
################################################################################################################
sub print_config
{
    my $config;

    my $key;
    my $value;

    ($config) = @_;

    while ( ($key, $value) = each (%$config) )
    {
        &com_dbg(sprintf("%-16s: %s\n", $key, $value));
    }
}

################################################################################################################
# fetch_config(%config, @argv)
################################################################################################################
sub fetch_config
{
    my $config;
    my @argv;

    my $arg_num;
    my $arg_idx;

    ($config, @argv) = @_;

    $arg_num = scalar(@argv);
    for( $arg_idx = 0; $arg_idx < $arg_num; $arg_idx ++ )
    {
        #&com_dbg(sprintf("arg %2d: %s\n", $arg_idx, $argv[ $arg_idx ]));

        if( $argv[ $arg_idx ] =~ /(.*?)=(.*)/ )
        {
            $$config{ $1 }  = $2;
            next;
        }
    }
}


########################################################################################################################
# com_dbg($info)
########################################################################################################################
sub com_dbg
{
    my $info;

    my $date;

    ($info) = @_;
    
    chomp($date = `date '+%m/%d/20%y %H:%M:%S'`);
    printf STDOUT ("[%s] %s", $date, $info) if defined($info);    
}


########################################################################################################################
# com_err($err_info)
########################################################################################################################
sub com_err
{
    my $err_info;

    my $date;

    ($err_info) = @_;

    chomp($date = `date '+%m/%d/20%y %H:%M:%S'`);
    printf STDERR ("[%s] %s", $date, $err_info) if defined($err_info);
}

########################################################################################################################
# com_die($err_desc, @err_info)
########################################################################################################################
sub com_die
{
    my $err_desc;
    my @err_info;

    my $err_code;

    ($err_desc, @err_info) = @_;

    if( $err_desc =~ /^\d+$/ )
    {
        $err_code = $err_desc;
    }
    else
    {
        $err_code = defined($g_err_code{ $err_desc }) ? $g_err_code{ $err_desc } : $g_err_code{"err_undef"};
    }

    &com_err("err_code : $err_code\n") if ( 0 != $err_code );
    &com_err(join("", @err_info,"\n"));

    exit $err_code;
}

